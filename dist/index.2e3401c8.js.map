{"mappings":"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","sources":["<anon>","src/js/code.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function() {\n    const arrow = document.querySelector(\".separator__arrow-button\");\n    arrow.addEventListener(\"click\", clickFunction);\n});\nconst clickFunction = (e)=>{\n    let now = new Date();\n    let date = new Date();\n    let result = isDateValid(now, date);\n    if (result.success) calculateAge(now, result.date);\n    console.log(e);\n};\nfunction isDateValid(now, date) {\n    const dayId = document.querySelector(\"#dayId\");\n    const monthId = document.querySelector(\"#monthId\");\n    const yearId = document.querySelector(\"#yearId\");\n    //validates each input separately\n    let result = ValidateEveryInput(dayId, monthId, yearId, now);\n    //if any of the inputs is incorrect return result\n    if (!result.success) return result;\n    //if each entry is correct, set the date with given data and validate if that date exists in the past\n    date.setFullYear(+yearId.value);\n    date.setMonth(+monthId.value - 1);\n    date.setDate(+dayId.value);\n    let isDateCorrect = date.getFullYear() === +yearId.value && date.getMonth() === +monthId.value - 1 && date.getDate() === +dayId.value;\n    //the date is incorrect\n    if (isNaN(date.getDate()) || !isDateCorrect) {\n        addInvalidDateValidation(VALIDATION_ERROR_INCORRECT_DATE);\n        return {\n            success: false\n        };\n    } else if (now < date) {\n        addInvalidDateValidation(VALIDATION_ERROR_DATE_IN_THE_FUTURE);\n        return {\n            success: false\n        };\n    } else {\n        removeAllValidation(dayId, monthId, yearId);\n        return {\n            success: true,\n            date: date\n        };\n    }\n}\nfunction removeAllValidation(dayId, monthId, yearId) {\n    removeValidationMessagesAndStyles(dayId);\n    removeValidationMessagesAndStyles(monthId);\n    removeValidationMessagesAndStyles(yearId);\n}\nfunction ValidateEveryInput(dayId, monthId, yearId, now) {\n    let isDayCorrect = !!dayId.value && !isNaN(dayId.value) && dayId.value >= 1 && dayId.value <= 31;\n    let isMonthCorrect = !!monthId.value && !isNaN(monthId.value) && monthId.value >= 1 && monthId.value <= 12;\n    let isYearCorrect = !!yearId.value && !isNaN(yearId.value);\n    let isYearInThePast = !!yearId.value && yearId.value <= now.getFullYear();\n    let isAnyValidFlag = true;\n    isAnyValidFlag = isInputValid(isDayCorrect, !dayId.value, dayId, VALIDATION_ERROR_INCORRECT_DAY) && isAnyValidFlag;\n    isAnyValidFlag = isInputValid(isMonthCorrect, !monthId.value, monthId, VALIDATION_ERROR_INCORRECT_MONTH) && isAnyValidFlag;\n    isAnyValidFlag = isInputValid(isYearCorrect, !yearId.value, yearId, VALIDATION_ERROR_INCORRECT_YEAR) && isAnyValidFlag;\n    isAnyValidFlag = isInputValid(isYearInThePast, !yearId.value, yearId, VALIDATION_ERROR_DATE_IN_THE_FUTURE) && isAnyValidFlag;\n    return {\n        success: isAnyValidFlag\n    };\n}\nfunction addInvalidDateValidation(message) {\n    const dayId = document.getElementById(\"dayId\");\n    const monthId = document.getElementById(\"monthId\");\n    const yearId = document.getElementById(\"yearId\");\n    addValidationMessageAndStyles(dayId, message);\n    addValidationMessageAndStyles(monthId, EMPTY_STRING);\n    addValidationMessageAndStyles(yearId, EMPTY_STRING);\n}\nfunction isInputValid(isInputCorrect, isInputNull, input, validationMessage) {\n    if (!isInputCorrect) {\n        if (isInputNull) {\n            addValidationMessageAndStyles(input, VALIDATION_ERROR_FIELD_REQUIRED);\n            return false;\n        } else {\n            addValidationMessageAndStyles(input, validationMessage);\n            return false;\n        }\n    } else {\n        removeValidationMessagesAndStyles(input);\n        return true;\n    }\n}\nfunction removeValidationMessagesAndStyles(element) {\n    element.style.borderColor = EMPTY_STRING;\n    if (element.nextElementSibling !== null) element.nextElementSibling.textContent = EMPTY_STRING;\n    if (element.previousElementSibling !== null) element.previousElementSibling.style.color = EMPTY_STRING;\n}\nfunction addValidationMessageAndStyles(element, validationMessage) {\n    element.style.borderColor = \"var(--LightRed)\";\n    if (element.nextElementSibling !== null) element.nextElementSibling.textContent = validationMessage;\n    if (element.previousElementSibling !== null) element.previousElementSibling.style.color = \"var(--LightRed)\";\n}\nfunction calculateAge(now, date) {\n    let diffMs = now - date;\n    let age = new Date(diffMs);\n    let years = Math.abs(age.getUTCFullYear() - 1970);\n    let months = Math.abs(age.getMonth());\n    let days = Math.abs(age.getUTCDate() - 1);\n    document.getElementById(\"yearsResultId\").textContent = years + SPACE;\n    document.getElementById(\"monthsResultId\").textContent = months + SPACE;\n    document.getElementById(\"daysResultId\").textContent = days + SPACE;\n}\n\n//# sourceMappingURL=index.2e3401c8.js.map\n","document.addEventListener('DOMContentLoaded', function () {\n    const arrow = document.querySelector('.separator__arrow-button');\n\n    arrow.addEventListener('click', clickFunction);\n});\n\nconst clickFunction = (e) => {\n    let now = new Date();\n    let date = new Date();\n\n    let result = isDateValid(now, date);\n    if (result.success) {\n        calculateAge(now, result.date);\n    }\n    console.log(e);\n}\n\nfunction isDateValid(now, date) {\n    const dayId = document.querySelector(\"#dayId\");\n    const monthId = document.querySelector(\"#monthId\");\n    const yearId = document.querySelector(\"#yearId\");\n\n    //validates each input separately\n    let result = ValidateEveryInput(dayId, monthId, yearId, now);\n\n    //if any of the inputs is incorrect return result\n    if(!result.success) {\n        return result;\n    }\n\n    //if each entry is correct, set the date with given data and validate if that date exists in the past\n    date.setFullYear(+yearId.value);\n    date.setMonth(+monthId.value - 1);\n    date.setDate(+dayId.value);\n\n    let isDateCorrect = date.getFullYear() === +yearId.value && date.getMonth() === +monthId.value - 1 && date.getDate() === +dayId.value;\n\n    //the date is incorrect\n    if (isNaN(date.getDate()) || !isDateCorrect) {\n        addInvalidDateValidation(VALIDATION_ERROR_INCORRECT_DATE);\n        return { success: false };\n    }\n    //the date is in the future\n    else if (now < date) {\n        addInvalidDateValidation(VALIDATION_ERROR_DATE_IN_THE_FUTURE);\n        return { success: false };\n    }\n    else {\n        removeAllValidation(dayId, monthId, yearId)\n        return { success: true, date: date };\n    }\n}\n\nfunction removeAllValidation(dayId, monthId, yearId) {\n    removeValidationMessagesAndStyles(dayId);\n    removeValidationMessagesAndStyles(monthId);\n    removeValidationMessagesAndStyles(yearId);\n}\n\nfunction ValidateEveryInput (dayId, monthId, yearId, now) {\n    let isDayCorrect = !!dayId.value && (!isNaN(dayId.value) && dayId.value >= 1 && dayId.value <= 31);\n    let isMonthCorrect = !!monthId.value && (!isNaN(monthId.value) && monthId.value >= 1 && monthId.value <= 12);\n    let isYearCorrect = !!yearId.value && (!isNaN(yearId.value));\n    let isYearInThePast = !!yearId.value && (yearId.value <= now.getFullYear());\n    let isAnyValidFlag = true;\n\n    isAnyValidFlag = isInputValid(isDayCorrect, !dayId.value, dayId, VALIDATION_ERROR_INCORRECT_DAY) && isAnyValidFlag;\n    isAnyValidFlag = isInputValid(isMonthCorrect, !monthId.value, monthId, VALIDATION_ERROR_INCORRECT_MONTH) && isAnyValidFlag;\n    isAnyValidFlag = isInputValid(isYearCorrect, !yearId.value, yearId, VALIDATION_ERROR_INCORRECT_YEAR) && isAnyValidFlag;\n    isAnyValidFlag = isInputValid(isYearInThePast, !yearId.value, yearId, VALIDATION_ERROR_DATE_IN_THE_FUTURE) && isAnyValidFlag;\n\n    return { success: isAnyValidFlag };\n}\n\nfunction addInvalidDateValidation(message) {\n    const dayId = document.getElementById(\"dayId\");\n    const monthId = document.getElementById(\"monthId\");\n    const yearId = document.getElementById(\"yearId\");\n    addValidationMessageAndStyles(dayId, message);\n    addValidationMessageAndStyles(monthId, EMPTY_STRING);\n    addValidationMessageAndStyles(yearId, EMPTY_STRING);\n}\n\nfunction isInputValid(isInputCorrect, isInputNull, input, validationMessage) {\n    if (!isInputCorrect) {\n        if (isInputNull) {\n            addValidationMessageAndStyles(input, VALIDATION_ERROR_FIELD_REQUIRED);\n            return false;\n        }\n        else {\n            addValidationMessageAndStyles(input, validationMessage);\n            return false;\n        }\n    }\n    else {\n        removeValidationMessagesAndStyles(input);\n\n        return true;\n    }\n}\n\nfunction removeValidationMessagesAndStyles(element) {\n    element.style.borderColor = EMPTY_STRING;\n\n    if (element.nextElementSibling !== null) {\n        element.nextElementSibling.textContent = EMPTY_STRING;\n    }\n    if (element.previousElementSibling !== null) {\n        element.previousElementSibling.style.color = EMPTY_STRING;\n    }\n}\n\nfunction addValidationMessageAndStyles(element, validationMessage) {\n    element.style.borderColor = 'var(--LightRed)';\n    if (element.nextElementSibling !== null) {\n        element.nextElementSibling.textContent = validationMessage;\n    }\n    if (element.previousElementSibling !== null) {\n        element.previousElementSibling.style.color = 'var(--LightRed)';\n    }\n}\n\nfunction calculateAge(now, date) {\n    let diffMs = now - date;\n    let age = new Date(diffMs);\n\n    let years = Math.abs(age.getUTCFullYear() - 1970);\n    let months = Math.abs(age.getMonth());\n    let days = Math.abs(age.getUTCDate() - 1);\n\n    document.getElementById(\"yearsResultId\").textContent = years + SPACE;\n    document.getElementById(\"monthsResultId\").textContent = months + SPACE;\n    document.getElementById(\"daysResultId\").textContent = days + SPACE;\n}\n\n\n\n"],"names":["document","addEventListener","arrow","querySelector","clickFunction","e","age","years","months","days","now","Date","result","isDateValid","date","isDayCorrect","isMonthCorrect","isYearCorrect","isYearInThePast","isAnyValidFlag","dayId","monthId","yearId","value","isNaN","getFullYear","isInputValid","VALIDATION_ERROR_INCORRECT_DAY","VALIDATION_ERROR_INCORRECT_MONTH","VALIDATION_ERROR_INCORRECT_YEAR","success","VALIDATION_ERROR_DATE_IN_THE_FUTURE","setFullYear","setMonth","setDate","isDateCorrect","getMonth","getDate","addInvalidDateValidation","VALIDATION_ERROR_INCORRECT_DATE","removeValidationMessagesAndStyles","Math","abs","getUTCFullYear","getUTCDate","getElementById","textContent","SPACE","console","log","message","addValidationMessageAndStyles","EMPTY_STRING","isInputCorrect","isInputNull","input","validationMessage","VALIDATION_ERROR_FIELD_REQUIRED","element","style","borderColor","nextElementSibling","previousElementSibling","color"],"version":3,"file":"index.2e3401c8.js.map"}